{"version":3,"sources":["logo.svg","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","handleChange","event","setState","value","target","console","log","state","renderTableData","bind","search","employee","employees","map","employee_age","employee_name","employee_salary","id","profile_image","key","Object","keys","index","toUpperCase","e","this","substr","preventDefault","filteredName","data","filter","store","indexOf","className","onSubmit","handleSubmit","type","placeholder","onChange","updateSearch","renderTableHeader","Component","App","fetch","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6ea0ae5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport style from './table.module.css'\n\nconst API = 'https://dummy.restapiexample.com/api/v1/employees'\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        this.renderTableData = this.renderTableData.bind(this);\n        this.state = {\n            search: '',\n            value: 0,\n            employee: props.employee,\n        };\n    }\n    renderTableData(employees) {\n        return employees.map((employee) => {\n            //append two other column data\n            //provide a true/false for each of the elements\n            //map another header component from my side to create a full table with checklist and checkbox using true and false\n\n            const { employee_age, employee_name, employee_salary, id, profile_image } = employee //destructuring\n            return (\n                <tr key={id}>\n                    <td>{id}</td>\n                    <td>{employee_name}</td>\n                    <td>{employee_salary}</td>\n                    <td>{employee_age}</td>\n                    <td>{profile_image}</td>\n                </tr>\n            )\n        })\n    }\n    renderTableHeader() {\n        let obj = { id: \"170887\", employee_name: \"Sourabh006\", employee_salary: \"50000\", employee_age: \"26\", profile_image: \"\" }\n        //Not sure why Object keys does not work with my json obj when\n        // I did the Object.keys with (this.props.data[0])\n        let header = Object.keys(obj)\n        return header.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n        })\n    }\n    //handle Change with an update for name search\n    updateSearch(e) {\n        this.setState({ search: e.target.value.substr(0, 20) });\n    }\n    //handle Change with select form\n    handleChange = (event) => {\n        this.setState({ value: event.target.value });\n        console.log(this.state.value)\n    }\n    //handle submit from form\n    handleSubmit(e) {\n        e.preventDefault();\n    }\n\n    addEmployee(e) {\n        //Prvent page from refreshng --> synthetic event and usually\n        //upon form submission the DOM flushes all the stored data/state\n        //this allows better control of the state and store data\n        e.preventDefault();\n    }\n\n    render() {\n        let filteredName = this.props.data.filter(\n            //Everytime search equals to name then we return\n            (employee) => {\n\n                //Create an if else here to simulate search\n                console.log('this is the value');\n                let store = this.state.value;\n                if (store == 1) {\n                    return employee.employee_age >= 15 && employee.employee_age <= 20;\n                }\n                else if (store == 2) {\n                    return employee.employee_age >= 20 && employee.employee_age < 30;\n                }\n                else if (store == 3) {\n                    return employee.employee_age >= 30 && employee.employee_age < 40;\n                }\n                else {\n                    return employee.employee_name.indexOf(this.state.search) !== -1;\n                }\n                //if cannot find this.state.search as an index of employee obj then do not return it\n            }\n        );\n\n        return (\n            <div className=\"Table\" >\n                <h1 id='title'>Hendricks Table Data</h1>\n                <form onSubmit={this.handleSubmit} className='data-search'>\n                    <label>\n                        <span className='label-header'>Name:</span>\n                    </label>\n\n                    <input type=\"text\"\n                        placeholder=\"Search\"\n                        value={this.state.search}\n                        onChange={this.updateSearch.bind(this)}\n                    />\n                    <label>\n                        <span className='label-header'>Age</span>\n                    </label>\n                    <div className='age-form'>\n                        <select className='' value={this.state.value} onChange={this.handleChange}>\n                            <option value=\"1\">15 to 20 Years Old</option>\n                            <option value=\"2\">20 to 30 Years Old</option>\n                            <option value=\"3\">30 to 40 Years Old</option>\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"Search\" />\n                </form>\n\n\n                <table id='employees'>\n                    <tbody className='table'>\n                        <tr>{this.renderTableHeader()}</tr>\n                        {this.renderTableData(filteredName)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nexport default Table;\n\n\n//not sure with the config for css modules do we need to install or add to config? ","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport Table from './Table';\nconst API = 'http://dummy.restapiexample.com/api/v1/employees'\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { data: [] };\n  }\n\n  // App contains the fetch method\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data => this.setState({ data })\n        // Update the App state with the new data\n      )\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className=\"App\" >\n        <Table data={data} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}